[![Build Status](https://travis-ci.org/gikmx/feliz.svg?branch=master)](https://travis-ci.org/gikmx/feliz)
[![Coverage Status](https://coveralls.io/repos/github/gikmx/feliz/badge.svg?branch=master)](https://coveralls.io/github/gikmx/feliz?branch=master)
<br>
[![NPM](https://nodei.co/npm/feliz.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/feliz/)

# feliz.js
The quickest wat to kickstart the development of your app.

## Compatibility

* Node v6.2+
* MacOS, Linux, Windows (untested)

## Overview
Feliz, it's not a module, it's a methodology to simplify the development of your next great
application. By itself feliz.js does nothing, if you really want to unleash the full power 
of it, you should take a look to the [plugin list](https://github.com/gikmx?query=feliz-),
specially server plugins and those that enable bundle management.

If you need to start right away, you can also take a look to the
[presets list](https://github.com/gikmx?query=feliz.preset) to see if one of the defined
flavors of development suits your needs.

## Example apps
These are some examples of how feliz.js is being used on the wild:

* [gik.website](http://github.com/hectormenendez/gik.website)

take a look of how this module can be used while the documentation is completed.

## Installation

There are few prerequisites to run, it's just a matter of creating a file structure
really.

First, like always, install the dependencies with `npm`:

```bash
npm i -S feliz feliz-{pluginName} feliz.preset-{presetName}
```

Then you have to decide the name of your application directory (we suggest `app`),
and create a subdirectory named `bundles` inside of it.

```bash
mkdir -p app/bundles
```

Once done that, create a file named: `routes.js` and use the following as contents.

```bash
touch app/routes.js
```
```javascript
// app/routes.js
module.exports = {
    '/':{bundle:'root'}
}
```

That will tell `Feliz` to add a route in `/` thar will be handled for a file inside
the bundles directory named `root.js` (it can also be `root/index.js`).

Create the file and add the following contents:

```bash
touch app/bundles/root.js
```

```javascript
// app/bundles/root.js
module.exports = function(request, reply){
    reply('Hello world!');
}
```

That's your first route handler, don't worry, there's plenty of documentation about those
on [hapi.js](http://github.com/hapijs/hapi), so you can start right away building your own
servers, websites, APIs or whatever you imagine.

But what's missing? you're right, what's th app entry point? and what does Feliz do?

Let' deal with the app entry point first, create the following file and contents:

```bash
touch index.js
```

```js
// index.js
const Feliz = require('feliz');
const feliz$ = Feliz({root: './app'});

feliz$.subscribe(
    feliz => console.log('ready', feliz.server.info),
    error => console.error('error', error)
);
```

And that's it, that's your entry point, and that's the server configuration (at least
in its most basic form). If you don't know anything about that latter dollar sign on
feliz$, you don't really have to worry much about it. (But you should really, really
think about learning about it [here](https://github.com/ReactiveX/rxjs)). At this point,
you just should know that the first function is going to be called when the feliz instance
(and the server) are ready for you to use, and the parameter called `feliz` will enclose
the main functionality of this module. The second function is a stream of errors,
everytime an error ocurs on the server (or on any other part of feliz) that function will
be called for you, containing given error.

Oh, an remember the route handler located on `app/bundles/root.js`? well, that function's
scope contains the same instance (feliz) you just learned about. where, you ask? let's go
back to that file and find out then.

```javascript
// app/bundles/root.js
module.exports = function(request, reply){
    console.log(this.server.info)
    reply('Hello world!');
}
```
See something familiar? but hey, let's see if everything works as expected, try it
yourself!

just run `index.js` with `node`, let it load and check out your route!

But what else can it do? almost everything you want, Feliz is like a toolbox at your
disposal to extend the base functionality of hapi.js and related tools. you'll see.

But since the API documentation is still a work in progress (and its definition as well)
you'll have to rely on some examples (or maybe help me writing some documentation?)

Anyways, checkout [gikmx.website](http://github.com/hectormenendez/gik.website) for an
usage example, hopefully it will help you while this documentation is completed.

---

## API Documentation (WIP)
{{#module name='feliz'}}
### Table of contents
{{>member-index~}}

### Feliz(conf)
{{>body~}}
{{>separator~}}
{{>members~}}
{{/module}}

---

{{#module name='Configuration'}}
{{>docs~}}
{{/module}}

---

{{#module name='Events'}}
{{>docs~}}
{{/module}}

---

{{#classes~}}
{{>docs~}}
{{/classes}}

---

## License
The MIT License (MIT)

Copyright (c) 2016 Héctor Adán Menéndez Rivera

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
